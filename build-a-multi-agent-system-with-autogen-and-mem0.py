# -*- coding: utf-8 -*-
"""AutoGen using memory.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eOqNnnn4n8esd5jpVpac4ZtEHj4JoWhx?resourcekey=0-32rDvNUtnSJxpV5lOMrGsg

# Agent with memory using Mem0

This notebook demonstrates an intelligent customer service chatbot system that combines:

- PyAutoGen for conversational agents
- Mem0 for memory management

[Mem0](https://www.mem0.ai/) provides a smart, self-improving memory layer for Large Language Models (LLMs), enabling developers to create personalized AI experiences that evolve with each user interaction. Refer [docs](https://docs.mem0.ai/overview) for more information.


Mem0 uses a hybrid database approach, combining vector, key-value, and graph databases to efficiently store and retrieve different types of information. It associates memories with unique identifiers, extracts relevant facts and preferences when storing, and uses a sophisticated retrieval process that considers relevance, importance, and recency.

Key features of Mem0 include:
1. Comprehensive Memory Management: Easily manage long-term, short-term, semantic, and episodic memories for individual users, agents, and sessions through robust APIs.
2. Self-Improving Memory: An adaptive system that continuously learns from user interactions, refining its understanding over time.
3. Cross-Platform Consistency: Ensures a unified user experience across various AI platforms and applications.
4. Centralized Memory Control: Simplifies storing, updating, and deleting memories.

This approach allows for maintaining context across sessions, adaptive personalization, and dynamic updates, making it more powerful than traditional Retrieval-Augmented Generation (RAG) approaches for creating context-aware AI applications.


**The implementation showcases how to initialize agents, manage conversation memory, and facilitate multi-agent conversations for enhanced problem-solving in Visionville scenarios.**

## Get API Keys

Please get `MEM0_API_KEY` from [Mem0 Platform](https://app.mem0.ai/).
"""

pip install pyautogen mem0ai

import os

from mem0 import MemoryClient

from autogen import ConversableAgent

os.environ["OPENAI_API_KEY"] = ""
os.environ["MEM0_API_KEY"] = ""

"""## Initialize Memory

Initialize a mem0 client. We'll utilize the client's methods for storing and accessing memories.

"""

memory = MemoryClient()

"""Initialize a conversation history between Jamie and the three agents in Visionville - Textbook Genie, Ariadne and Socrates. It contains a list of message exchanges between the Jamie and the assistants, structured as dictionaries with 'role' and 'content' keys. The entire conversation is then stored in memory using the `memory.add()` method, associated with the identifier "jamie"."""

conversation = [
    {
        "role": "assistant",
        "content": "Hello Jamie! I’m Textbook Genie, here to help you with your academic needs. How can I assist you today?",
    },
    {
        "role": "user",
        "content": "I’m stuck on a math problem in my textbook. Can you help me with it?",
    },
    {
        "role": "assistant",
        "content": "Of course! I remember that math is your favorite subject, Jamie. What problem are you working on?",
    },
    {
        "role": "user",
        "content": "It’s a geometry problem about finding the area of a triangle with unequal sides.",
    },
    {
        "role": "assistant",
        "content": "Ah, I see. You can use Heron’s formula for triangles with unequal sides. The formula is: \n\nArea = √(s(s-a)(s-b)(s-c)) where 'a', 'b', and 'c' are the sides of the triangle and 's' is the semi-perimeter: (a + b + c)/2.\n\nDo you have the side lengths?",
    },
    {
        "role": "user",
        "content": "Yes! The sides are 7, 9, and 12 units.",
    },
    {
        "role": "assistant",
        "content": "Perfect! Using Heron’s formula, the semi-perimeter would be (7 + 9 + 12)/2 = 14. So the area is √(14(14-7)(14-9)(14-12)) = √(14*7*5*2) = √980 ≈ 31.3 square units.\n\nDoes that help clarify the solution?",
    },
    {
        "role": "user",
        "content": "Yes, thanks! That makes a lot of sense.",
    },
    {
        "role": "assistant",
        "content": "I’m glad it’s clear! Now, is there anything else you’d like help with? Maybe you’d like some tips for your next class?",
    },
    {
        "role": "user",
        "content": "Actually, I’m trying to find a way to organize my study materials better. Any suggestions?",
    },
    {
        "role": "assistant",
        "content": "I can help with that! Let me bring in Ariadne, our expert in navigation and organization, to assist you in organizing your materials efficiently.",
    },
    {
        "role": "assistant",
        "content": "Hi Jamie, Ariadne here! I’m excited to help you streamline your study process. I know you enjoy solving puzzles, so let’s make organizing your materials feel just as fun!\n\nYou could start by categorizing your notes by subject and then by topic. Digital tools like Notion or Google Keep are great for this. How does that sound?",
    },
    {
        "role": "user",
        "content": "That sounds helpful! Any tips on how I can keep track of the different tasks I need to complete?",
    },
    {
        "role": "assistant",
        "content": "Absolutely! I’d recommend using a task management system with deadlines. You could create a weekly plan with reminders and break tasks into small chunks. Apps like Todoist or Trello are excellent for this.\n\nWould you like me to help you set up a system right now?",
    },
    {
        "role": "user",
        "content": "Maybe later. But this seems useful, thank you!",
    },
    {
        "role": "assistant",
        "content": "Glad you found it useful, Jamie! If you ever want to dive into a philosophical discussion about why we organize things or even deeper topics, feel free to ask Socrates. I’ll bring him in!",
    },
    {
        "role": "assistant",
        "content": "Hello Jamie, it’s Socrates. You know, asking questions about the nature of organization can lead to interesting insights. Why do you think organizing your study materials helps you learn better?",
    },
    {
        "role": "user",
        "content": "I guess it helps me find what I need quickly, and it makes studying less stressful.",
    },
    {
        "role": "assistant",
        "content": "Precisely! Organization removes the clutter that distracts the mind. It’s not just about order, but about freeing your mind to focus on the essential. Do you think that a well-organized space influences how you think?",
    },
    {
        "role": "user",
        "content": "Yes, definitely! I feel more focused when everything is in its place.",
    },
    {
        "role": "assistant",
        "content": "Exactly! A clear environment often leads to clear thinking. This is why philosophers believe that our outer world can reflect our inner world. Organizing can be a way of mastering both.\n\nAny other thoughts you'd like to explore?",
    },
    {
        "role": "user",
        "content": "Not right now, but I’ll definitely think more about it. Thanks for the help, Socrates!",
    },
    {
        "role": "assistant",
        "content": "Anytime, Jamie! Remember, I'm always here to guide you through the questions of life. Don’t hesitate to ask me anything.",
    }
]


memory.add(messages=conversation, user_id="jamie")

"""## Multi Agent Conversation

In this demo, we initialize two AI agents: a "manager" who assumes the role of Textbook Genie and Ariadne who comes up with the learning roadmap. Both of them retrieve relevant memories for a given question, combining them with the question into a prompt. This prompt can be used by either the manager or Ariadne to generate a contextually informed response.
"""

manager = ConversableAgent(
    "manager",
    system_message="You are Textbook Genie. You are a knowledgeable tutor, sifting through textbooks and delivering accurate, citation-backed answers to students’ queries.",
    llm_config={"config_list": [{"model": "gpt-3.5-turbo", "temperature": 0, "api_key": os.environ.get("OPENAI_API_KEY")}]},
    human_input_mode="NEVER",
)

ariadne = ConversableAgent(
    "Ariadne",
    system_message="A guide through educational and career roadmaps, offering tailored advice and helping students make informed decisions about their learning paths.",
    llm_config={"config_list": [{"model": "gpt-3.5-turbo", "temperature": 0, "api_key": os.environ.get("OPENAI_API_KEY")}]},
    human_input_mode="NEVER",
)

data = "Suggest a task plan for improving my scores in my favorite subject"

relevant_memories = memory.search(data, user_id="jamie")
flatten_relevant_memories = "\n".join([m["memory"] for m in relevant_memories])

prompt = f"""
Context:
{flatten_relevant_memories}
\n\n
Question: {data}
"""

result = manager.send(prompt, ariadne, request_reply=True)

